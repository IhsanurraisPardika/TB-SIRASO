generator client {
  provider = "prisma-client-js"
  
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  user_id        Int       @id @default(autoincrement())
  fullname       String
  username       String    @unique
  phone          String
  password       String
  status         String
  alamat         String
  email          String    @unique
  transactions   Transactions[]
  reviews        Review[]
  keranjang      Keranjang[]

  refundRequests RefundRequests[] // Relasi balik ke RefundRequests
}

model Menu {
  menu_id        Int       @id @default(autoincrement())
  nama_makanan   String
  deskripsi      String
  kategori       String
  harga          String
  stok           Int
  gambar_url     String
  rating         Float
  available      String
  bahan          String
  toko           Toko      @relation(fields: [toko_id], references: [toko_id]) // Menambahkan relasi dengan Toko
  toko_id        Int       // Menyimpan ID toko (cafe)
  reviews        Review[]  
  keranjang      Keranjang[]
}

model Keranjang {
  keranjang_id       Int       @id @default(autoincrement())
  user               User      @relation(fields: [user_id], references: [user_id])
  user_id            Int
  menu               Menu      @relation(fields: [menu_id], references: [menu_id])
  menu_id            Int
  jumlah             Int
  waktu_pengambilan  DateTime
}

model Transactions {
  transaction_id     Int              @id @default(autoincrement())
  user               User             @relation(fields: [user_id], references: [user_id])
  user_id            Int
  total_price        Float
  metode_pembayaran  String
  status_pembayaran  String
  kode_diskon        String?
  tanggal_transaksi  DateTime         @default(now())
  bukti_pembayaran   String?
  riwayat_pengembalian String?
  pickup_schedule    PickupSchedule?
  refundRequests RefundRequests[] // Relasi balik ke RefundRequests
}

model PickupSchedule {
  pickup_id          Int             @id @default(autoincrement())
  transaction        Transactions    @relation(fields: [transaction_id], references: [transaction_id])
  transaction_id     Int             @unique
  waktu_pengambilan  DateTime
  status_pengambilan Boolean
  nomor_antrian      Int
}

model SalesReports {
  report_id                Int       @id @default(autoincrement())
  admin_id                 Int
  tanggal_awal             DateTime
  tanggal_akhir            DateTime
  total_pendapatan         Float
  total_pesanan            Int
  total_pengembalian_dana  Float
}

model Review {
  review_id      Int       @id @default(autoincrement())
  user           User      @relation(fields: [user_id], references: [user_id])
  user_id        Int
  menu           Menu      @relation(fields: [menu_id], references: [menu_id])
  menu_id        Int
  rating         Int
  komentar       String
  tanggal_ulas   DateTime  @default(now())
}

model Discounts {
  discount_id       Int      @id @default(autoincrement())
  kode_diskon       String   @unique
  persentase_diskon Float
  masa_berlaku      DateTime
  min_pembelian     Float
  is_active         Boolean  @default(true)
}

model Toko {
  toko_id       Int      @id @default(autoincrement())
  nama_toko     String   @unique
  alamat        String
  menu          Menu[]   // Relasi satu ke banyak dengan Menu
}

model RefundRequests {
  refund_id          Int       @id @default(autoincrement())
  user_id            Int
  transaction_id     Int
  nomor_rekening     String
  nama_bank          String
  alasan             String
  bukti              String
  status             String   @default("Pending")
  tanggal_pengajuan  DateTime @default(now())
  
  // Relasi dengan tabel User
  user               User     @relation(fields: [user_id], references: [user_id])
  
  // Relasi dengan tabel Transactions
  transaction        Transactions @relation(fields: [transaction_id], references: [transaction_id])
}
